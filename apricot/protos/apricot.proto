/*
 * === This file is part of ALICE O² ===
 *
 * Copyright 2020 CERN and copyright holders of ALICE O².
 * Author: Teo Mrnjavac <teo.mrnjavac@cern.ch>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In applying this license CERN does not waive the privileges and
 * immunities granted to it by virtue of its status as an
 * Intergovernmental Organization or submit itself to any jurisdiction.
 */

syntax = "proto3";

package apricot;
option java_package = "ch.cern.alice.o2.apricot.rpcserver";
option go_package = "protos;apricotpb";

service Apricot {
    rpc NewRunNumber(Empty) returns (RunNumberResponse) {}
    rpc GetDefaults(Empty) returns (StringMap) {}
    rpc GetVars(Empty) returns (StringMap) {}
    rpc GetComponentConfiguration(ComponentRequest) returns (ComponentResponse) {}
    rpc GetComponentRuntime(ComponentRuntimeRequest) returns (ComponentResponse) {}
    rpc RawGetRecursive(RawGetRecursiveRequest) returns (ComponentResponse) {}
}

enum RunType {
    NULL = 0;
    ANY = 1;
    PHYSICS = 2;
    TECHNICAL = 3;
}

message Empty {}

message ComponentQuery {
    string component = 1;
    RunType runType = 2;
    string machineRole = 3;
    string entry = 4;
    string timestamp = 5;
}

message ComponentRequest {
    oneof queryPath {
        string path = 1;
        ComponentQuery query = 2;
    }
    bool processTemplate = 3;
    map<string, string> varStack = 4;
}

message ComponentRuntimeRequest {
    string component = 1;
    string entry = 2;
}

message ComponentResponse {
    string payload = 1;
}

message RunNumberResponse {
    uint32 runNumber = 1;
}

message StringMap {
    map<string, string> stringMap = 1;
}

message RawGetRecursiveRequest {
    string rawPath = 1;
}