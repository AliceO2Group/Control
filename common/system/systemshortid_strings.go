// Code generated by "enumer -type=ShortID -yaml -json -text -transform=upper -output=systemshortid_strings.go"; DO NOT EDIT.

package system

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_ShortIDName_0      = "PPEEFF"
	_ShortIDLowerName_0 = "ppeeff"
	_ShortIDName_1      = "TROHPC"
	_ShortIDLowerName_1 = "trohpc"
	_ShortIDName_2      = "M"
	_ShortIDLowerName_2 = "m"
	_ShortIDName_3      = "Z"
	_ShortIDLowerName_3 = "z"
	_ShortIDName_4      = "GES"
	_ShortIDLowerName_4 = "ges"
	_ShortIDName_5      = "IDFVNUJW"
	_ShortIDLowerName_5 = "idfvnujw"
	_ShortIDName_6      = "KL"
	_ShortIDLowerName_6 = "kl"
)

var (
	_ShortIDIndex_0 = [...]uint8{0, 2, 4, 6}
	_ShortIDIndex_1 = [...]uint8{0, 1, 2, 3, 4, 5, 6}
	_ShortIDIndex_2 = [...]uint8{0, 1}
	_ShortIDIndex_3 = [...]uint8{0, 1}
	_ShortIDIndex_4 = [...]uint8{0, 1, 2, 3}
	_ShortIDIndex_5 = [...]uint8{0, 1, 2, 3, 4, 5, 6, 7, 8}
	_ShortIDIndex_6 = [...]uint8{0, 1, 2}
)

func (i ShortID) String() string {
	switch {
	case -3 <= i && i <= -1:
		i -= -3
		return _ShortIDName_0[_ShortIDIndex_0[i]:_ShortIDIndex_0[i+1]]
	case 3 <= i && i <= 8:
		i -= 3
		return _ShortIDName_1[_ShortIDIndex_1[i]:_ShortIDIndex_1[i+1]]
	case i == 10:
		return _ShortIDName_2
	case i == 15:
		return _ShortIDName_3
	case 17 <= i && i <= 19:
		i -= 17
		return _ShortIDName_4[_ShortIDIndex_4[i]:_ShortIDIndex_4[i+1]]
	case 32 <= i && i <= 39:
		i -= 32
		return _ShortIDName_5[_ShortIDIndex_5[i]:_ShortIDIndex_5[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _ShortIDName_6[_ShortIDIndex_6[i]:_ShortIDIndex_6[i+1]]
	default:
		return fmt.Sprintf("ShortID(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ShortIDNoOp() {
	var x [1]struct{}
	_ = x[PP-(-3)]
	_ = x[EE-(-2)]
	_ = x[FF-(-1)]
	_ = x[T-(3)]
	_ = x[R-(4)]
	_ = x[O-(5)]
	_ = x[H-(6)]
	_ = x[P-(7)]
	_ = x[C-(8)]
	_ = x[M-(10)]
	_ = x[Z-(15)]
	_ = x[G-(17)]
	_ = x[E-(18)]
	_ = x[S-(19)]
	_ = x[I-(32)]
	_ = x[D-(33)]
	_ = x[F-(34)]
	_ = x[V-(35)]
	_ = x[N-(36)]
	_ = x[U-(37)]
	_ = x[J-(38)]
	_ = x[W-(39)]
	_ = x[K-(254)]
	_ = x[L-(255)]
}

var _ShortIDValues = []ShortID{PP, EE, FF, T, R, O, H, P, C, M, Z, G, E, S, I, D, F, V, N, U, J, W, K, L}

var _ShortIDNameToValueMap = map[string]ShortID{
	_ShortIDName_0[0:2]:      PP,
	_ShortIDLowerName_0[0:2]: PP,
	_ShortIDName_0[2:4]:      EE,
	_ShortIDLowerName_0[2:4]: EE,
	_ShortIDName_0[4:6]:      FF,
	_ShortIDLowerName_0[4:6]: FF,
	_ShortIDName_1[0:1]:      T,
	_ShortIDLowerName_1[0:1]: T,
	_ShortIDName_1[1:2]:      R,
	_ShortIDLowerName_1[1:2]: R,
	_ShortIDName_1[2:3]:      O,
	_ShortIDLowerName_1[2:3]: O,
	_ShortIDName_1[3:4]:      H,
	_ShortIDLowerName_1[3:4]: H,
	_ShortIDName_1[4:5]:      P,
	_ShortIDLowerName_1[4:5]: P,
	_ShortIDName_1[5:6]:      C,
	_ShortIDLowerName_1[5:6]: C,
	_ShortIDName_2[0:1]:      M,
	_ShortIDLowerName_2[0:1]: M,
	_ShortIDName_3[0:1]:      Z,
	_ShortIDLowerName_3[0:1]: Z,
	_ShortIDName_4[0:1]:      G,
	_ShortIDLowerName_4[0:1]: G,
	_ShortIDName_4[1:2]:      E,
	_ShortIDLowerName_4[1:2]: E,
	_ShortIDName_4[2:3]:      S,
	_ShortIDLowerName_4[2:3]: S,
	_ShortIDName_5[0:1]:      I,
	_ShortIDLowerName_5[0:1]: I,
	_ShortIDName_5[1:2]:      D,
	_ShortIDLowerName_5[1:2]: D,
	_ShortIDName_5[2:3]:      F,
	_ShortIDLowerName_5[2:3]: F,
	_ShortIDName_5[3:4]:      V,
	_ShortIDLowerName_5[3:4]: V,
	_ShortIDName_5[4:5]:      N,
	_ShortIDLowerName_5[4:5]: N,
	_ShortIDName_5[5:6]:      U,
	_ShortIDLowerName_5[5:6]: U,
	_ShortIDName_5[6:7]:      J,
	_ShortIDLowerName_5[6:7]: J,
	_ShortIDName_5[7:8]:      W,
	_ShortIDLowerName_5[7:8]: W,
	_ShortIDName_6[0:1]:      K,
	_ShortIDLowerName_6[0:1]: K,
	_ShortIDName_6[1:2]:      L,
	_ShortIDLowerName_6[1:2]: L,
}

var _ShortIDNames = []string{
	_ShortIDName_0[0:2],
	_ShortIDName_0[2:4],
	_ShortIDName_0[4:6],
	_ShortIDName_1[0:1],
	_ShortIDName_1[1:2],
	_ShortIDName_1[2:3],
	_ShortIDName_1[3:4],
	_ShortIDName_1[4:5],
	_ShortIDName_1[5:6],
	_ShortIDName_2[0:1],
	_ShortIDName_3[0:1],
	_ShortIDName_4[0:1],
	_ShortIDName_4[1:2],
	_ShortIDName_4[2:3],
	_ShortIDName_5[0:1],
	_ShortIDName_5[1:2],
	_ShortIDName_5[2:3],
	_ShortIDName_5[3:4],
	_ShortIDName_5[4:5],
	_ShortIDName_5[5:6],
	_ShortIDName_5[6:7],
	_ShortIDName_5[7:8],
	_ShortIDName_6[0:1],
	_ShortIDName_6[1:2],
}

// ShortIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShortIDString(s string) (ShortID, error) {
	if val, ok := _ShortIDNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _ShortIDNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShortID values", s)
}

// ShortIDValues returns all values of the enum
func ShortIDValues() []ShortID {
	return _ShortIDValues
}

// ShortIDStrings returns a slice of all String values of the enum
func ShortIDStrings() []string {
	strs := make([]string, len(_ShortIDNames))
	copy(strs, _ShortIDNames)
	return strs
}

// IsAShortID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShortID) IsAShortID() bool {
	for _, v := range _ShortIDValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ShortID
func (i ShortID) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ShortID
func (i *ShortID) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShortID should be a string, got %s", data)
	}

	var err error
	*i, err = ShortIDString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ShortID
func (i ShortID) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ShortID
func (i *ShortID) UnmarshalText(text []byte) error {
	var err error
	*i, err = ShortIDString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ShortID
func (i ShortID) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ShortID
func (i *ShortID) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ShortIDString(s)
	return err
}
