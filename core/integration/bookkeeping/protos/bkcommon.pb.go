// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.3
// source: protos/bkcommon.proto

package bkpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Detector int32

const (
	Detector_DETECTOR_NULL Detector = 0
	Detector_DETECTOR_TPC  Detector = 3
	Detector_DETECTOR_TRD  Detector = 4
	Detector_DETECTOR_TOF  Detector = 5
	Detector_DETECTOR_HMP  Detector = 6
	Detector_DETECTOR_PHS  Detector = 7
	Detector_DETECTOR_CPV  Detector = 8
	Detector_DETECTOR_MCH  Detector = 10
	Detector_DETECTOR_ZDC  Detector = 15
	Detector_DETECTOR_EMC  Detector = 18
	Detector_DETECTOR_TST  Detector = 19
	Detector_DETECTOR_ITS  Detector = 32
	Detector_DETECTOR_FDD  Detector = 33
	Detector_DETECTOR_FT0  Detector = 34
	Detector_DETECTOR_FV0  Detector = 35
	Detector_DETECTOR_MFT  Detector = 36
	Detector_DETECTOR_MID  Detector = 37
)

// Enum value maps for Detector.
var (
	Detector_name = map[int32]string{
		0:  "DETECTOR_NULL",
		3:  "DETECTOR_TPC",
		4:  "DETECTOR_TRD",
		5:  "DETECTOR_TOF",
		6:  "DETECTOR_HMP",
		7:  "DETECTOR_PHS",
		8:  "DETECTOR_CPV",
		10: "DETECTOR_MCH",
		15: "DETECTOR_ZDC",
		18: "DETECTOR_EMC",
		19: "DETECTOR_TST",
		32: "DETECTOR_ITS",
		33: "DETECTOR_FDD",
		34: "DETECTOR_FT0",
		35: "DETECTOR_FV0",
		36: "DETECTOR_MFT",
		37: "DETECTOR_MID",
	}
	Detector_value = map[string]int32{
		"DETECTOR_NULL": 0,
		"DETECTOR_TPC":  3,
		"DETECTOR_TRD":  4,
		"DETECTOR_TOF":  5,
		"DETECTOR_HMP":  6,
		"DETECTOR_PHS":  7,
		"DETECTOR_CPV":  8,
		"DETECTOR_MCH":  10,
		"DETECTOR_ZDC":  15,
		"DETECTOR_EMC":  18,
		"DETECTOR_TST":  19,
		"DETECTOR_ITS":  32,
		"DETECTOR_FDD":  33,
		"DETECTOR_FT0":  34,
		"DETECTOR_FV0":  35,
		"DETECTOR_MFT":  36,
		"DETECTOR_MID":  37,
	}
)

func (x Detector) Enum() *Detector {
	p := new(Detector)
	*p = x
	return p
}

func (x Detector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Detector) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_bkcommon_proto_enumTypes[0].Descriptor()
}

func (Detector) Type() protoreflect.EnumType {
	return &file_protos_bkcommon_proto_enumTypes[0]
}

func (x Detector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Detector.Descriptor instead.
func (Detector) EnumDescriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{0}
}

type RunQuality int32

const (
	RunQuality_RUN_QUALITY_NULL RunQuality = 0
	RunQuality_RUN_QUALITY_BAD  RunQuality = 1
	RunQuality_RUN_QUALITY_GOOD RunQuality = 2
	RunQuality_RUN_QUALITY_TEST RunQuality = 3
	RunQuality_RUN_QUALITY_NONE RunQuality = 4
)

// Enum value maps for RunQuality.
var (
	RunQuality_name = map[int32]string{
		0: "RUN_QUALITY_NULL",
		1: "RUN_QUALITY_BAD",
		2: "RUN_QUALITY_GOOD",
		3: "RUN_QUALITY_TEST",
		4: "RUN_QUALITY_NONE",
	}
	RunQuality_value = map[string]int32{
		"RUN_QUALITY_NULL": 0,
		"RUN_QUALITY_BAD":  1,
		"RUN_QUALITY_GOOD": 2,
		"RUN_QUALITY_TEST": 3,
		"RUN_QUALITY_NONE": 4,
	}
)

func (x RunQuality) Enum() *RunQuality {
	p := new(RunQuality)
	*p = x
	return p
}

func (x RunQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_bkcommon_proto_enumTypes[1].Descriptor()
}

func (RunQuality) Type() protoreflect.EnumType {
	return &file_protos_bkcommon_proto_enumTypes[1]
}

func (x RunQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunQuality.Descriptor instead.
func (RunQuality) EnumDescriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{1}
}

type RunType int32

const (
	RunType_RUN_TYPE_NULL                     RunType = 0
	RunType_RUN_TYPE_PHYSICS                  RunType = 1
	RunType_RUN_TYPE_TECHNICAL                RunType = 2
	RunType_RUN_TYPE_PEDESTAL                 RunType = 3
	RunType_RUN_TYPE_PULSER                   RunType = 4
	RunType_RUN_TYPE_LASER                    RunType = 5
	RunType_RUN_TYPE_CALIBRATION_ITHR_TUNING  RunType = 6
	RunType_RUN_TYPE_CALIBRATION_VCASN_TUNING RunType = 7
	RunType_RUN_TYPE_CALIBRATION_THR_SCAN     RunType = 8
	RunType_RUN_TYPE_CALIBRATION_DIGITAL_SCAN RunType = 9
	RunType_RUN_TYPE_CALIBRATION_ANALOG_SCAN  RunType = 10
	RunType_RUN_TYPE_CALIBRATION_FHR          RunType = 11
	RunType_RUN_TYPE_CALIBRATION_ALPIDE_SCAN  RunType = 12
	RunType_RUN_TYPE_CALIBRATION              RunType = 13
	RunType_RUN_TYPE_COSMICS                  RunType = 14
	RunType_RUN_TYPE_SYNTHETIC                RunType = 15
	RunType_RUN_TYPE_NOISE                    RunType = 16
	RunType_RUN_TYPE_CALIBRATION_PULSE_LENGTH RunType = 17
	RunType_RUN_TYPE_CALIBRATION_VRESETD      RunType = 18
)

// Enum value maps for RunType.
var (
	RunType_name = map[int32]string{
		0:  "RUN_TYPE_NULL",
		1:  "RUN_TYPE_PHYSICS",
		2:  "RUN_TYPE_TECHNICAL",
		3:  "RUN_TYPE_PEDESTAL",
		4:  "RUN_TYPE_PULSER",
		5:  "RUN_TYPE_LASER",
		6:  "RUN_TYPE_CALIBRATION_ITHR_TUNING",
		7:  "RUN_TYPE_CALIBRATION_VCASN_TUNING",
		8:  "RUN_TYPE_CALIBRATION_THR_SCAN",
		9:  "RUN_TYPE_CALIBRATION_DIGITAL_SCAN",
		10: "RUN_TYPE_CALIBRATION_ANALOG_SCAN",
		11: "RUN_TYPE_CALIBRATION_FHR",
		12: "RUN_TYPE_CALIBRATION_ALPIDE_SCAN",
		13: "RUN_TYPE_CALIBRATION",
		14: "RUN_TYPE_COSMICS",
		15: "RUN_TYPE_SYNTHETIC",
		16: "RUN_TYPE_NOISE",
		17: "RUN_TYPE_CALIBRATION_PULSE_LENGTH",
		18: "RUN_TYPE_CALIBRATION_VRESETD",
	}
	RunType_value = map[string]int32{
		"RUN_TYPE_NULL":                     0,
		"RUN_TYPE_PHYSICS":                  1,
		"RUN_TYPE_TECHNICAL":                2,
		"RUN_TYPE_PEDESTAL":                 3,
		"RUN_TYPE_PULSER":                   4,
		"RUN_TYPE_LASER":                    5,
		"RUN_TYPE_CALIBRATION_ITHR_TUNING":  6,
		"RUN_TYPE_CALIBRATION_VCASN_TUNING": 7,
		"RUN_TYPE_CALIBRATION_THR_SCAN":     8,
		"RUN_TYPE_CALIBRATION_DIGITAL_SCAN": 9,
		"RUN_TYPE_CALIBRATION_ANALOG_SCAN":  10,
		"RUN_TYPE_CALIBRATION_FHR":          11,
		"RUN_TYPE_CALIBRATION_ALPIDE_SCAN":  12,
		"RUN_TYPE_CALIBRATION":              13,
		"RUN_TYPE_COSMICS":                  14,
		"RUN_TYPE_SYNTHETIC":                15,
		"RUN_TYPE_NOISE":                    16,
		"RUN_TYPE_CALIBRATION_PULSE_LENGTH": 17,
		"RUN_TYPE_CALIBRATION_VRESETD":      18,
	}
)

func (x RunType) Enum() *RunType {
	p := new(RunType)
	*p = x
	return p
}

func (x RunType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_bkcommon_proto_enumTypes[2].Descriptor()
}

func (RunType) Type() protoreflect.EnumType {
	return &file_protos_bkcommon_proto_enumTypes[2]
}

func (x RunType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunType.Descriptor instead.
func (RunType) EnumDescriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{2}
}

type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunNumber     int32   `protobuf:"varint,1,opt,name=runNumber,proto3" json:"runNumber,omitempty"`
	EnvironmentId *string `protobuf:"bytes,2,opt,name=environmentId,proto3,oneof" json:"environmentId,omitempty"`
	BytesReadOut  *int32  `protobuf:"varint,3,opt,name=bytesReadOut,proto3,oneof" json:"bytesReadOut,omitempty"`
	// Unix timestamp when this entity was created
	CreatedAt      int64  `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Id             int32  `protobuf:"varint,5,opt,name=Id,proto3" json:"Id,omitempty"`
	NDetectors     *int32 `protobuf:"varint,6,opt,name=nDetectors,proto3,oneof" json:"nDetectors,omitempty"`
	NEpns          *int32 `protobuf:"varint,7,opt,name=nEpns,proto3,oneof" json:"nEpns,omitempty"`
	NFlps          *int32 `protobuf:"varint,8,opt,name=nFlps,proto3,oneof" json:"nFlps,omitempty"`
	NSubtimeframes *int32 `protobuf:"varint,9,opt,name=nSubtimeframes,proto3,oneof" json:"nSubtimeframes,omitempty"`
	// Repository hash
	PdpConfigOption *string `protobuf:"bytes,10,opt,name=pdpConfigOption,proto3,oneof" json:"pdpConfigOption,omitempty"`
	// Library file location of the pdp topology description
	PdpTopologyDescriptionLibraryFile *string `protobuf:"bytes,11,opt,name=pdpTopologyDescriptionLibraryFile,proto3,oneof" json:"pdpTopologyDescriptionLibraryFile,omitempty"`
	// Parameters given to the pdp workflow
	PdpWorkflowParameters *string `protobuf:"bytes,12,opt,name=pdpWorkflowParameters,proto3,oneof" json:"pdpWorkflowParameters,omitempty"`
	// Beam type of the pdp
	PdpBeamType *string `protobuf:"bytes,13,opt,name=pdpBeamType,proto3,oneof" json:"pdpBeamType,omitempty"`
	// Config uri of readout.
	ReadoutCfgUri *string    `protobuf:"bytes,14,opt,name=readoutCfgUri,proto3,oneof" json:"readoutCfgUri,omitempty"`
	RunQuality    RunQuality `protobuf:"varint,15,opt,name=runQuality,proto3,enum=o2.bookkeeping.RunQuality" json:"runQuality,omitempty"`
	RunType       *RunType   `protobuf:"varint,16,opt,name=runType,proto3,enum=o2.bookkeeping.RunType,oneof" json:"runType,omitempty"`
	TfbDdMode     *string    `protobuf:"bytes,17,opt,name=tfbDdMode,proto3,oneof" json:"tfbDdMode,omitempty"`
	TimeO2End     *int64     `protobuf:"varint,18,opt,name=timeO2End,proto3,oneof" json:"timeO2End,omitempty"`
	TimeO2Start   *int64     `protobuf:"varint,19,opt,name=timeO2Start,proto3,oneof" json:"timeO2Start,omitempty"`
	TimeTrgEnd    *int64     `protobuf:"varint,20,opt,name=timeTrgEnd,proto3,oneof" json:"timeTrgEnd,omitempty"`
	TimeTrgStart  *int64     `protobuf:"varint,21,opt,name=timeTrgStart,proto3,oneof" json:"timeTrgStart,omitempty"`
	// Trigger value
	TriggerValue *string `protobuf:"bytes,22,opt,name=triggerValue,proto3,oneof" json:"triggerValue,omitempty"`
	// The full name or file location of the odcTopology
	OdcTopologyFullName *string    `protobuf:"bytes,23,opt,name=odcTopologyFullName,proto3,oneof" json:"odcTopologyFullName,omitempty"`
	DdFlp               *bool      `protobuf:"varint,24,opt,name=ddFlp,proto3,oneof" json:"ddFlp,omitempty"`
	Dcs                 *bool      `protobuf:"varint,25,opt,name=dcs,proto3,oneof" json:"dcs,omitempty"`
	Epn                 *bool      `protobuf:"varint,26,opt,name=epn,proto3,oneof" json:"epn,omitempty"`
	EpnTopology         *string    `protobuf:"bytes,27,opt,name=epnTopology,proto3,oneof" json:"epnTopology,omitempty"`
	Detectors           []Detector `protobuf:"varint,28,rep,packed,name=detectors,proto3,enum=o2.bookkeeping.Detector" json:"detectors,omitempty"`
	// Unix timestamp when this entity was last updated
	UpdatedAt int64 `protobuf:"varint,30,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// A string that marks the period of the lhc
	LhcPeriod *string `protobuf:"bytes,31,opt,name=lhcPeriod,proto3,oneof" json:"lhcPeriod,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bkcommon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bkcommon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{0}
}

func (x *Run) GetRunNumber() int32 {
	if x != nil {
		return x.RunNumber
	}
	return 0
}

func (x *Run) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

func (x *Run) GetBytesReadOut() int32 {
	if x != nil && x.BytesReadOut != nil {
		return *x.BytesReadOut
	}
	return 0
}

func (x *Run) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Run) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Run) GetNDetectors() int32 {
	if x != nil && x.NDetectors != nil {
		return *x.NDetectors
	}
	return 0
}

func (x *Run) GetNEpns() int32 {
	if x != nil && x.NEpns != nil {
		return *x.NEpns
	}
	return 0
}

func (x *Run) GetNFlps() int32 {
	if x != nil && x.NFlps != nil {
		return *x.NFlps
	}
	return 0
}

func (x *Run) GetNSubtimeframes() int32 {
	if x != nil && x.NSubtimeframes != nil {
		return *x.NSubtimeframes
	}
	return 0
}

func (x *Run) GetPdpConfigOption() string {
	if x != nil && x.PdpConfigOption != nil {
		return *x.PdpConfigOption
	}
	return ""
}

func (x *Run) GetPdpTopologyDescriptionLibraryFile() string {
	if x != nil && x.PdpTopologyDescriptionLibraryFile != nil {
		return *x.PdpTopologyDescriptionLibraryFile
	}
	return ""
}

func (x *Run) GetPdpWorkflowParameters() string {
	if x != nil && x.PdpWorkflowParameters != nil {
		return *x.PdpWorkflowParameters
	}
	return ""
}

func (x *Run) GetPdpBeamType() string {
	if x != nil && x.PdpBeamType != nil {
		return *x.PdpBeamType
	}
	return ""
}

func (x *Run) GetReadoutCfgUri() string {
	if x != nil && x.ReadoutCfgUri != nil {
		return *x.ReadoutCfgUri
	}
	return ""
}

func (x *Run) GetRunQuality() RunQuality {
	if x != nil {
		return x.RunQuality
	}
	return RunQuality_RUN_QUALITY_NULL
}

func (x *Run) GetRunType() RunType {
	if x != nil && x.RunType != nil {
		return *x.RunType
	}
	return RunType_RUN_TYPE_NULL
}

func (x *Run) GetTfbDdMode() string {
	if x != nil && x.TfbDdMode != nil {
		return *x.TfbDdMode
	}
	return ""
}

func (x *Run) GetTimeO2End() int64 {
	if x != nil && x.TimeO2End != nil {
		return *x.TimeO2End
	}
	return 0
}

func (x *Run) GetTimeO2Start() int64 {
	if x != nil && x.TimeO2Start != nil {
		return *x.TimeO2Start
	}
	return 0
}

func (x *Run) GetTimeTrgEnd() int64 {
	if x != nil && x.TimeTrgEnd != nil {
		return *x.TimeTrgEnd
	}
	return 0
}

func (x *Run) GetTimeTrgStart() int64 {
	if x != nil && x.TimeTrgStart != nil {
		return *x.TimeTrgStart
	}
	return 0
}

func (x *Run) GetTriggerValue() string {
	if x != nil && x.TriggerValue != nil {
		return *x.TriggerValue
	}
	return ""
}

func (x *Run) GetOdcTopologyFullName() string {
	if x != nil && x.OdcTopologyFullName != nil {
		return *x.OdcTopologyFullName
	}
	return ""
}

func (x *Run) GetDdFlp() bool {
	if x != nil && x.DdFlp != nil {
		return *x.DdFlp
	}
	return false
}

func (x *Run) GetDcs() bool {
	if x != nil && x.Dcs != nil {
		return *x.Dcs
	}
	return false
}

func (x *Run) GetEpn() bool {
	if x != nil && x.Epn != nil {
		return *x.Epn
	}
	return false
}

func (x *Run) GetEpnTopology() string {
	if x != nil && x.EpnTopology != nil {
		return *x.EpnTopology
	}
	return ""
}

func (x *Run) GetDetectors() []Detector {
	if x != nil {
		return x.Detectors
	}
	return nil
}

func (x *Run) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Run) GetLhcPeriod() string {
	if x != nil && x.LhcPeriod != nil {
		return *x.LhcPeriod
	}
	return ""
}

type LHCFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FillNumber int32 `protobuf:"varint,1,opt,name=fillNumber,proto3" json:"fillNumber,omitempty"`
	// Timestamp of the start of the stable beam (if it applies)
	StableBeamStart *int64 `protobuf:"varint,2,opt,name=stableBeamStart,proto3,oneof" json:"stableBeamStart,omitempty"`
	// Timestamp of the end of the stable beam (if it applies)
	StableBeamEnd *int64 `protobuf:"varint,3,opt,name=stableBeamEnd,proto3,oneof" json:"stableBeamEnd,omitempty"`
	// Duration of the stable beam (if it applies)
	StableBeamDuration *int64 `protobuf:"varint,4,opt,name=stableBeamDuration,proto3,oneof" json:"stableBeamDuration,omitempty"`
	BeamType           string `protobuf:"bytes,5,opt,name=beamType,proto3" json:"beamType,omitempty"`
	FillingSchemeName  string `protobuf:"bytes,6,opt,name=fillingSchemeName,proto3" json:"fillingSchemeName,omitempty"`
}

func (x *LHCFill) Reset() {
	*x = LHCFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bkcommon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHCFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHCFill) ProtoMessage() {}

func (x *LHCFill) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bkcommon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHCFill.ProtoReflect.Descriptor instead.
func (*LHCFill) Descriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{1}
}

func (x *LHCFill) GetFillNumber() int32 {
	if x != nil {
		return x.FillNumber
	}
	return 0
}

func (x *LHCFill) GetStableBeamStart() int64 {
	if x != nil && x.StableBeamStart != nil {
		return *x.StableBeamStart
	}
	return 0
}

func (x *LHCFill) GetStableBeamEnd() int64 {
	if x != nil && x.StableBeamEnd != nil {
		return *x.StableBeamEnd
	}
	return 0
}

func (x *LHCFill) GetStableBeamDuration() int64 {
	if x != nil && x.StableBeamDuration != nil {
		return *x.StableBeamDuration
	}
	return 0
}

func (x *LHCFill) GetBeamType() string {
	if x != nil {
		return x.BeamType
	}
	return ""
}

func (x *LHCFill) GetFillingSchemeName() string {
	if x != nil {
		return x.FillingSchemeName
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique CERN identifier of this user.
	ExternalId int32 `protobuf:"varint,1,opt,name=externalId,proto3" json:"externalId,omitempty"`
	// The unique identifier of this entity.
	Id *int32 `protobuf:"varint,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Name of the user.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bkcommon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bkcommon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetExternalId() int32 {
	if x != nil {
		return x.ExternalId
	}
	return 0
}

func (x *User) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// End of run reason
type EorReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier
	Id *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Category of the eor (as described in reason_types table)
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// Title of the eor (as described in reason_types table)
	Title       string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *EorReason) Reset() {
	*x = EorReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bkcommon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EorReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EorReason) ProtoMessage() {}

func (x *EorReason) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bkcommon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EorReason.ProtoReflect.Descriptor instead.
func (*EorReason) Descriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{3}
}

func (x *EorReason) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EorReason) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EorReason) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EorReason) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Generic empty message when services return no data
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_bkcommon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_bkcommon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_bkcommon_proto_rawDescGZIP(), []int{4}
}

var File_protos_bkcommon_proto protoreflect.FileDescriptor

var file_protos_bkcommon_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x6b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6f, 0x32, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x0c, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0a, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x45, 0x70, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x6e, 0x45, 0x70, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x46, 0x6c, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x05, 0x6e, 0x46, 0x6c, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x0e, 0x6e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x64, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0f, 0x70, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x21, 0x70, 0x64, 0x70, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x21, 0x70, 0x64, 0x70, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x70, 0x64, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x15, 0x70, 0x64, 0x70, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x64, 0x70, 0x42, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x70, 0x64, 0x70,
	0x42, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x55, 0x72, 0x69, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x43, 0x66, 0x67,
	0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x32, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x32, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0b, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x66,
	0x62, 0x44, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x09, 0x74, 0x66, 0x62, 0x44, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x32, 0x45, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x32, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x32, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x67, 0x45, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x72, 0x67, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x10, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x6f, 0x64, 0x63, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x13, 0x6f,
	0x64, 0x63, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x64, 0x46, 0x6c, 0x70, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x05, 0x64, 0x64, 0x46, 0x6c, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x64, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52,
	0x03, 0x64, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x03, 0x65, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x65, 0x70, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0b, 0x65, 0x70, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x32, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x6c,
	0x68, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17,
	0x52, 0x09, 0x6c, 0x68, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x45, 0x70, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e,
	0x46, 0x6c, 0x70, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x6d,
	0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x64, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x0a, 0x22, 0x5f,
	0x70, 0x64, 0x70, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x64, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x64, 0x70, 0x42, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x43, 0x66, 0x67, 0x55, 0x72, 0x69, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x72, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x66,
	0x62, 0x44, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x32, 0x45, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x32,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x67, 0x45, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x67,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x64, 0x63, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x64, 0x64, 0x46, 0x6c, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x63, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x70, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x70, 0x6e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x68, 0x63,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x07, 0x4c, 0x48, 0x43, 0x46, 0x69,
	0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x12, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x61, 0x6d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x22, 0x90, 0x01, 0x0a, 0x09, 0x45, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0xe7, 0x02, 0x0a,
	0x08, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x50, 0x43, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x44, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x46,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x48,
	0x4d, 0x50, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x50, 0x48, 0x53, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x50, 0x56, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x5a, 0x44, 0x43, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x43, 0x10, 0x12, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x53, 0x54, 0x10, 0x13,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x54, 0x53,
	0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46,
	0x44, 0x44, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x46, 0x54, 0x30, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x46, 0x56, 0x30, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x46, 0x54, 0x10, 0x24, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x44, 0x10, 0x25, 0x22, 0x04, 0x08, 0x01,
	0x10, 0x01, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x09, 0x10, 0x09, 0x22, 0x04,
	0x08, 0x0b, 0x10, 0x0e, 0x22, 0x04, 0x08, 0x10, 0x10, 0x10, 0x22, 0x04, 0x08, 0x11, 0x10, 0x11,
	0x22, 0x04, 0x08, 0x14, 0x10, 0x1f, 0x2a, 0x79, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55,
	0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x55, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x04, 0x2a, 0xb0, 0x04, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59,
	0x53, 0x49, 0x43, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x44, 0x45, 0x53,
	0x54, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x48, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x43, 0x41,
	0x53, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e,
	0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x48, 0x52, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x55, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x50, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x0c, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x4d, 0x49, 0x43, 0x53, 0x10, 0x0e, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54,
	0x48, 0x45, 0x54, 0x49, 0x43, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x52,
	0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x44, 0x10, 0x12, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x32, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65,
	0x70, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x62, 0x6b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_bkcommon_proto_rawDescOnce sync.Once
	file_protos_bkcommon_proto_rawDescData = file_protos_bkcommon_proto_rawDesc
)

func file_protos_bkcommon_proto_rawDescGZIP() []byte {
	file_protos_bkcommon_proto_rawDescOnce.Do(func() {
		file_protos_bkcommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_bkcommon_proto_rawDescData)
	})
	return file_protos_bkcommon_proto_rawDescData
}

var file_protos_bkcommon_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_bkcommon_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protos_bkcommon_proto_goTypes = []interface{}{
	(Detector)(0),     // 0: o2.bookkeeping.Detector
	(RunQuality)(0),   // 1: o2.bookkeeping.RunQuality
	(RunType)(0),      // 2: o2.bookkeeping.RunType
	(*Run)(nil),       // 3: o2.bookkeeping.Run
	(*LHCFill)(nil),   // 4: o2.bookkeeping.LHCFill
	(*User)(nil),      // 5: o2.bookkeeping.User
	(*EorReason)(nil), // 6: o2.bookkeeping.EorReason
	(*Empty)(nil),     // 7: o2.bookkeeping.Empty
}
var file_protos_bkcommon_proto_depIdxs = []int32{
	1, // 0: o2.bookkeeping.Run.runQuality:type_name -> o2.bookkeeping.RunQuality
	2, // 1: o2.bookkeeping.Run.runType:type_name -> o2.bookkeeping.RunType
	0, // 2: o2.bookkeeping.Run.detectors:type_name -> o2.bookkeeping.Detector
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_protos_bkcommon_proto_init() }
func file_protos_bkcommon_proto_init() {
	if File_protos_bkcommon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_bkcommon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bkcommon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHCFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bkcommon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bkcommon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EorReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_bkcommon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_bkcommon_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_bkcommon_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protos_bkcommon_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protos_bkcommon_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_bkcommon_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_bkcommon_proto_goTypes,
		DependencyIndexes: file_protos_bkcommon_proto_depIdxs,
		EnumInfos:         file_protos_bkcommon_proto_enumTypes,
		MessageInfos:      file_protos_bkcommon_proto_msgTypes,
	}.Build()
	File_protos_bkcommon_proto = out.File
	file_protos_bkcommon_proto_rawDesc = nil
	file_protos_bkcommon_proto_goTypes = nil
	file_protos_bkcommon_proto_depIdxs = nil
}
