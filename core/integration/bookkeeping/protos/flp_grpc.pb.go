// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: protos/flp.proto

package bkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlpService_CreateMany_FullMethodName     = "/o2.bookkeeping.FlpService/CreateMany"
	FlpService_UpdateCounters_FullMethodName = "/o2.bookkeeping.FlpService/UpdateCounters"
)

// FlpServiceClient is the client API for FlpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlpServiceClient interface {
	CreateMany(ctx context.Context, in *ManyFlpsCreationRequest, opts ...grpc.CallOption) (*FlpList, error)
	UpdateCounters(ctx context.Context, in *UpdateCountersRequest, opts ...grpc.CallOption) (*Flp, error)
}

type flpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlpServiceClient(cc grpc.ClientConnInterface) FlpServiceClient {
	return &flpServiceClient{cc}
}

func (c *flpServiceClient) CreateMany(ctx context.Context, in *ManyFlpsCreationRequest, opts ...grpc.CallOption) (*FlpList, error) {
	out := new(FlpList)
	err := c.cc.Invoke(ctx, FlpService_CreateMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flpServiceClient) UpdateCounters(ctx context.Context, in *UpdateCountersRequest, opts ...grpc.CallOption) (*Flp, error) {
	out := new(Flp)
	err := c.cc.Invoke(ctx, FlpService_UpdateCounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlpServiceServer is the server API for FlpService service.
// All implementations should embed UnimplementedFlpServiceServer
// for forward compatibility
type FlpServiceServer interface {
	CreateMany(context.Context, *ManyFlpsCreationRequest) (*FlpList, error)
	UpdateCounters(context.Context, *UpdateCountersRequest) (*Flp, error)
}

// UnimplementedFlpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlpServiceServer struct {
}

func (UnimplementedFlpServiceServer) CreateMany(context.Context, *ManyFlpsCreationRequest) (*FlpList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedFlpServiceServer) UpdateCounters(context.Context, *UpdateCountersRequest) (*Flp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCounters not implemented")
}

// UnsafeFlpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlpServiceServer will
// result in compilation errors.
type UnsafeFlpServiceServer interface {
	mustEmbedUnimplementedFlpServiceServer()
}

func RegisterFlpServiceServer(s grpc.ServiceRegistrar, srv FlpServiceServer) {
	s.RegisterService(&FlpService_ServiceDesc, srv)
}

func _FlpService_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManyFlpsCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlpServiceServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlpService_CreateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlpServiceServer).CreateMany(ctx, req.(*ManyFlpsCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlpService_UpdateCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlpServiceServer).UpdateCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlpService_UpdateCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlpServiceServer).UpdateCounters(ctx, req.(*UpdateCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlpService_ServiceDesc is the grpc.ServiceDesc for FlpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o2.bookkeeping.FlpService",
	HandlerType: (*FlpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMany",
			Handler:    _FlpService_CreateMany_Handler,
		},
		{
			MethodName: "UpdateCounters",
			Handler:    _FlpService_UpdateCounters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/flp.proto",
}
