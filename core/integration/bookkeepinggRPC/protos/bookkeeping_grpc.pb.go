// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bookkeeping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookkeepingControlClient is the client API for BookkeepingControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookkeepingControlClient interface {
	// Run management requests
	CreateRun(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	UpdateRun(ctx context.Context, in *UpdateRunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	// Log management requests
	CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// Flp management requests
	CreateFlp(ctx context.Context, in *CreateFlpRequest, opts ...grpc.CallOption) (*FlpResponse, error)
	UpdateFlp(ctx context.Context, in *UpdateFlpRequest, opts ...grpc.CallOption) (*FlpResponse, error)
	// Environment management requests
	CreateEnvironment(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error)
}

type bookkeepingControlClient struct {
	cc grpc.ClientConnInterface
}

func NewBookkeepingControlClient(cc grpc.ClientConnInterface) BookkeepingControlClient {
	return &bookkeepingControlClient{cc}
}

func (c *bookkeepingControlClient) CreateRun(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/CreateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookkeepingControlClient) UpdateRun(ctx context.Context, in *UpdateRunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/UpdateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookkeepingControlClient) CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookkeepingControlClient) CreateFlp(ctx context.Context, in *CreateFlpRequest, opts ...grpc.CallOption) (*FlpResponse, error) {
	out := new(FlpResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/CreateFlp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookkeepingControlClient) UpdateFlp(ctx context.Context, in *UpdateFlpRequest, opts ...grpc.CallOption) (*FlpResponse, error) {
	out := new(FlpResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/UpdateFlp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookkeepingControlClient) CreateEnvironment(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookkeepingControlClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/bookkeeping.BookkeepingControl/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookkeepingControlServer is the server API for BookkeepingControl service.
// All implementations should embed UnimplementedBookkeepingControlServer
// for forward compatibility
type BookkeepingControlServer interface {
	// Run management requests
	CreateRun(context.Context, *CreateRunRequest) (*RunResponse, error)
	UpdateRun(context.Context, *UpdateRunRequest) (*RunResponse, error)
	// Log management requests
	CreateLog(context.Context, *CreateLogRequest) (*LogResponse, error)
	// Flp management requests
	CreateFlp(context.Context, *CreateFlpRequest) (*FlpResponse, error)
	UpdateFlp(context.Context, *UpdateFlpRequest) (*FlpResponse, error)
	// Environment management requests
	CreateEnvironment(context.Context, *CreateEnvRequest) (*EnvironmentResponse, error)
	UpdateEnvironment(context.Context, *UpdateEnvRequest) (*EnvironmentResponse, error)
}

// UnimplementedBookkeepingControlServer should be embedded to have forward compatible implementations.
type UnimplementedBookkeepingControlServer struct {
}

func (UnimplementedBookkeepingControlServer) CreateRun(context.Context, *CreateRunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (UnimplementedBookkeepingControlServer) UpdateRun(context.Context, *UpdateRunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRun not implemented")
}
func (UnimplementedBookkeepingControlServer) CreateLog(context.Context, *CreateLogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (UnimplementedBookkeepingControlServer) CreateFlp(context.Context, *CreateFlpRequest) (*FlpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlp not implemented")
}
func (UnimplementedBookkeepingControlServer) UpdateFlp(context.Context, *UpdateFlpRequest) (*FlpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlp not implemented")
}
func (UnimplementedBookkeepingControlServer) CreateEnvironment(context.Context, *CreateEnvRequest) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedBookkeepingControlServer) UpdateEnvironment(context.Context, *UpdateEnvRequest) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}

// UnsafeBookkeepingControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookkeepingControlServer will
// result in compilation errors.
type UnsafeBookkeepingControlServer interface {
	mustEmbedUnimplementedBookkeepingControlServer()
}

func RegisterBookkeepingControlServer(s grpc.ServiceRegistrar, srv BookkeepingControlServer) {
	s.RegisterService(&BookkeepingControl_ServiceDesc, srv)
}

func _BookkeepingControl_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/CreateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).CreateRun(ctx, req.(*CreateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookkeepingControl_UpdateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).UpdateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/UpdateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).UpdateRun(ctx, req.(*UpdateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookkeepingControl_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).CreateLog(ctx, req.(*CreateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookkeepingControl_CreateFlp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).CreateFlp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/CreateFlp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).CreateFlp(ctx, req.(*CreateFlpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookkeepingControl_UpdateFlp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).UpdateFlp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/UpdateFlp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).UpdateFlp(ctx, req.(*UpdateFlpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookkeepingControl_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).CreateEnvironment(ctx, req.(*CreateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookkeepingControl_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookkeepingControlServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeping.BookkeepingControl/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookkeepingControlServer).UpdateEnvironment(ctx, req.(*UpdateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookkeepingControl_ServiceDesc is the grpc.ServiceDesc for BookkeepingControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookkeepingControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookkeeping.BookkeepingControl",
	HandlerType: (*BookkeepingControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRun",
			Handler:    _BookkeepingControl_CreateRun_Handler,
		},
		{
			MethodName: "UpdateRun",
			Handler:    _BookkeepingControl_UpdateRun_Handler,
		},
		{
			MethodName: "CreateLog",
			Handler:    _BookkeepingControl_CreateLog_Handler,
		},
		{
			MethodName: "CreateFlp",
			Handler:    _BookkeepingControl_CreateFlp_Handler,
		},
		{
			MethodName: "UpdateFlp",
			Handler:    _BookkeepingControl_UpdateFlp_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _BookkeepingControl_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _BookkeepingControl_UpdateEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/bookkeeping.proto",
}
