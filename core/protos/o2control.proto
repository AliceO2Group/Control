/*
 * === This file is part of ALICE O² ===
 *
 * Copyright 2018 CERN and copyright holders of ALICE O².
 * Author: Teo Mrnjavac <teo.mrnjavac@cern.ch>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In applying this license CERN does not waive the privileges and
 * immunities granted to it by virtue of its status as an
 * Intergovernmental Organization or submit itself to any jurisdiction.
 */

syntax = "proto3";

package o2control;
option java_package = "ch.cern.alice.o2.control.rpcserver";
option go_package = "pb";

//////////////// Common event messages ///////////////

message Event_MesosHeartbeat {
}

//////////////////////////////////////////////////////

service Control {
    rpc TrackStatus (StatusRequest) returns (stream StatusReply) {}

    rpc GetFrameworkInfo (GetFrameworkInfoRequest) returns (GetFrameworkInfoReply) {}
    rpc Teardown (TeardownRequest) returns (TeardownReply) {}

    rpc GetEnvironments (GetEnvironmentsRequest) returns (GetEnvironmentsReply) {}
    rpc NewEnvironment (NewEnvironmentRequest) returns (NewEnvironmentReply) {}
    rpc GetEnvironment (GetEnvironmentRequest) returns (GetEnvironmentReply) {}
    rpc ControlEnvironment (ControlEnvironmentRequest) returns (ControlEnvironmentReply) {}
    rpc ModifyEnvironment (ModifyEnvironmentRequest) returns (ModifyEnvironmentReply) {}
    rpc DestroyEnvironment (DestroyEnvironmentRequest) returns (DestroyEnvironmentReply) {}

    rpc GetTasks (GetTasksRequest) returns (GetTasksReply) {}
    rpc GetTask(GetTaskRequest) returns (GetTaskReply) {}
    rpc CleanupTasks(CleanupTasksRequest) returns (CleanupTasksReply) {}

    rpc GetRoles (GetRolesRequest) returns (GetRolesReply) {}

    rpc GetWorkflowTemplates (GetWorkflowTemplatesRequest) returns (GetWorkflowTemplatesReply) {}

    rpc ListRepos(ListReposRequest) returns (ListReposReply) {}
    rpc AddRepo(AddRepoRequest) returns (AddRepoReply) {}
    rpc RemoveRepo(RemoveRepoRequest) returns (RemoveRepoReply) {}
    rpc RefreshRepos(RefreshReposRequest) returns (Empty) {}
    rpc SetDefaultRepo(SetDefaultRepoRequest) returns (Empty) {}
    rpc SetGlobalDefaultRevision(SetGlobalDefaultRevisionRequest) returns (Empty) {}
    rpc SetRepoDefaultRevision(SetRepoDefaultRevisionRequest) returns (SetRepoDefaultRevisionReply) {}
}

////////////////////////////////////////
// Global status
////////////////////////////////////////
message StatusRequest {}
message StatusReply {
    string state = 1;
    repeated StatusUpdate statusUpdates = 2;
}
message StatusUpdate {
    enum Level {
        DEBUG = 0;
        INFO = 1;
        WARNING = 2;
        ERROR = 3;
    }
    Level level = 1;
    oneof Event {
        Event_MesosHeartbeat mesosHeartbeat = 2;
        //TODO add other events here and in events.proto
    }
}

////////////////////////////////////////
// Framework
////////////////////////////////////////
message GetFrameworkInfoRequest {}
message Version {
    int32 major = 1;
    int32 minor = 2;
    int32 patch = 3;
    string build = 4;
    string productName = 5;
    string versionStr = 6;
}
message GetFrameworkInfoReply {
    string frameworkId = 1;
    int32 environmentsCount = 2;
    int32 tasksCount = 3;
    string state = 4;
    int32 hostsCount = 5;
    string instanceName = 6;
    Version version = 7;
}

// Not implemented yet
message TeardownRequest {
    string reason = 1;
}
message TeardownReply {}

////////////////////////////////////////
// Environment
////////////////////////////////////////
message GetEnvironmentsRequest {}
message GetEnvironmentsReply {
    string frameworkId = 1;
    repeated EnvironmentInfo environments = 2;
}
message EnvironmentInfo {
    string id = 1;
    string createdWhen = 2;
    string state = 3;
    repeated ShortTaskInfo tasks = 4;
    string rootRole = 5;
    uint32 currentRunNumber = 6;
}

message NewEnvironmentRequest {
    string workflowTemplate = 1;
}
message NewEnvironmentReply {
    EnvironmentInfo environment = 1;
}

message GetEnvironmentRequest {
    string id = 1;
}
message GetEnvironmentReply {
    EnvironmentInfo environment = 1;
    RoleInfo workflow = 2;
}

message ControlEnvironmentRequest {
    string id = 1;
    enum Optype {
        NOOP = 0;
        START_ACTIVITY = 1;
        STOP_ACTIVITY = 2;
        CONFIGURE = 3;
        RESET = 4;
        GO_ERROR = 5;
    }
    Optype type = 2;
}
message ControlEnvironmentReply {
    string id = 1;
    string state = 2;
    uint32 currentRunNumber = 3;
}

message ModifyEnvironmentRequest {
    string id = 1;
    repeated EnvironmentOperation operations = 2;
    bool reconfigureAll = 3;
}
message EnvironmentOperation {
    enum Optype {
        NOOP = 0;
        REMOVE_ROLE = 3;
        ADD_ROLE = 4;
    }
    Optype type = 1;
    string roleName = 2;
}
message ModifyEnvironmentReply {
    repeated EnvironmentOperation failedOperations = 1;
    string id = 2;
    string state = 3;
}

message DestroyEnvironmentRequest {
    string id = 1;
    bool keepTasks = 2;
}
message DestroyEnvironmentReply {
    CleanupTasksReply cleanupTasksReply = 1;
}

////////////////////////////////////////
// Tasks
////////////////////////////////////////
message ShortTaskInfo {
    string name = 1;
    bool locked = 2;
    string taskId = 3;
    string status = 4;
    string state = 5;
    string className = 6;
    TaskDeploymentInfo deploymentInfo = 7;
}
message TaskDeploymentInfo {
    string hostname = 1;
    string agentId = 2;
    string offerId = 3;
    string executorId = 4;
}

message GetTasksRequest {}
message GetTasksReply {
    repeated ShortTaskInfo tasks = 1;
}
message GetTaskRequest {
    string taskId = 1;
}
message GetTaskReply {
    TaskInfo task = 1;
}

message TaskClassInfo {
    string name = 1;
    string controlMode = 2;
}
message CommandInfo {
    repeated string env = 1;
    bool shell = 2;
    string value = 3;
    repeated string arguments = 4;
    string user = 5;
}
message ChannelInfo {
    string name = 1;
    string type = 2;
    string target = 3;
}
message TaskInfo {
    ShortTaskInfo shortInfo = 1;
    TaskClassInfo classInfo = 2;
    repeated ChannelInfo inboundChannels = 3;
    repeated ChannelInfo outboundChannels = 4;
    CommandInfo commandInfo = 5;
    string taskPath = 6;
    string envId = 7;
}

message CleanupTasksRequest {
    repeated string taskIds = 1;
}
message CleanupTasksReply {
    repeated ShortTaskInfo killedTasks = 1;
    repeated ShortTaskInfo runningTasks = 2;
}

////////////////////////////////////////
// Roles
////////////////////////////////////////
message GetRolesRequest {
    string envId = 1;
    string pathSpec = 2;
}

message RoleInfo {
    string name = 1;
    string status = 2;
    string state = 3;
    string fullPath = 4;
    repeated string taskIds = 5;
    repeated RoleInfo roles = 6;
}

message GetRolesReply {
    repeated RoleInfo roles = 1;
}

message GetWorkflowTemplatesRequest{
    string repoPattern = 1;
    string revisionPattern = 2;
    bool allBranches = 3;
    bool allTags = 4;
}

message WorkflowTemplateInfo {
    string repo = 1;
    string template = 2;
    string revision = 3;
}

message GetWorkflowTemplatesReply{
    repeated WorkflowTemplateInfo workflowTemplates = 1;
}

////////////////////////////////////////
// Repos
////////////////////////////////////////

message ListReposRequest {}

message RepoInfo {
    string name = 1;
    bool default = 2;
    string defaultRevision = 3;
}

message ListReposReply {
    repeated RepoInfo repos = 1;
    string globalDefaultRevision = 2;
}

message AddRepoRequest {
    string name = 1;
    string defaultRevision = 2;
}

message AddRepoReply {
    string newDefaultRevision = 1;
    string info = 2;
}

message RemoveRepoRequest {
    int32 index = 1;
}

message RemoveRepoReply {
    string newDefaultRepo = 1;
}

message RefreshReposRequest {
    int32 index = 1;
}

message SetDefaultRepoRequest {
    int32 index = 1;
}

message SetGlobalDefaultRevisionRequest {
    string revision = 1;
}

message SetRepoDefaultRevisionRequest {
    int32 index = 1;
    string revision = 2;
}

message SetRepoDefaultRevisionReply {
    string info = 1;
}

message Empty {

}