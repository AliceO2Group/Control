/*
 * === This file is part of ALICE O² ===
 *
 * Copyright 2018 CERN and copyright holders of ALICE O².
 * Author: Teo Mrnjavac <teo.mrnjavac@cern.ch>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In applying this license CERN does not waive the privileges and
 * immunities granted to it by virtue of its status as an
 * Intergovernmental Organization or submit itself to any jurisdiction.
 */

syntax = "proto3";

package o2control;
option java_package = "ch.cern.alice.o2.control.rpcserver";
option go_package = "pb";

//////////////// Common event messages ///////////////

message Event_MesosHeartbeat {
}

//////////////////////////////////////////////////////

service Control {
    rpc TrackStatus (StatusRequest) returns (stream StatusReply) {}
    rpc GetFrameworkInfo (GetFrameworkInfoRequest) returns (GetFrameworkInfoReply) {}
    rpc Teardown (TeardownRequest) returns (TeardownReply) {}
    rpc GetEnvironments (GetEnvironmentsRequest) returns (GetEnvironmentsReply) {}
    rpc NewEnvironment (NewEnvironmentRequest) returns (NewEnvironmentReply) {}
    rpc GetEnvironment (GetEnvironmentRequest) returns (GetEnvironmentReply) {}
    rpc ControlEnvironment (ControlEnvironmentRequest) returns (ControlEnvironmentReply) {}
    rpc ModifyEnvironment (ModifyEnvironmentRequest) returns (ModifyEnvironmentReply) {}
    rpc DestroyEnvironment (DestroyEnvironmentRequest) returns (DestroyEnvironmentReply) {}
    rpc GetTasks (GetTasksRequest) returns (GetTasksReply) {}
}

message StatusRequest {}
message StatusReply {
    string state = 1;
    repeated StatusUpdate statusUpdates = 2;
}
message StatusUpdate {
    enum Level {
        DEBUG = 0;
        INFO = 1;
        WARNING = 2;
        ERROR = 3;
    }
    Level level = 1;
    oneof Event {
        Event_MesosHeartbeat mesosHeartbeat = 2;
        //TODO add other events here and in events.proto
    }
}

message GetFrameworkInfoRequest {}
message GetFrameworkInfoReply {
    string frameworkId = 1;
    int32 environmentsCount = 2;
    int32 tasksCount = 3;
    string state = 4;
}

message TeardownRequest {
    string reason = 1;
}
message TeardownReply {}

message GetEnvironmentsRequest {}
message GetEnvironmentsReply {
    string frameworkId = 1;
    repeated EnvironmentInfo environments = 2;
}
message EnvironmentInfo {
    string id = 1;
    string createdWhen = 2;
    string state = 3;
    repeated string tasks = 4;
}

message NewEnvironmentRequest {
    string workflow = 1;
}
message NewEnvironmentReply {
    string id = 1;
    string state = 2;
}

message GetEnvironmentRequest {
    string id = 1;
}
message GetEnvironmentReply {
    EnvironmentInfo environment = 1;
}

message ControlEnvironmentRequest {
    string id = 1;
    enum Optype {
        NOOP = 0;
        START_ACTIVITY = 1;
        STOP_ACTIVITY = 2;
        CONFIGURE = 3;
        RESET = 4;
        GO_ERROR = 5;
    }
    Optype type = 2;
}
message ControlEnvironmentReply {
    string id = 1;
    string state = 2;
}

message ModifyEnvironmentRequest {
    string id = 1;
    repeated EnvironmentOperation operations = 2;
    bool reconfigureAll = 3;
}
message EnvironmentOperation {
    enum Optype {
        NOOP = 0;
        REMOVE_ROLE = 3;
        ADD_ROLE = 4;
    }
    Optype type = 1;
    string roleName = 2;
}
message ModifyEnvironmentReply {
    repeated EnvironmentOperation failedOperations = 1;
    string id = 2;
    string state = 3;
}

message DestroyEnvironmentRequest {
    string id = 1;
}
message DestroyEnvironmentReply {}

message GetTasksRequest {}
message GetTasksReply {
    repeated TaskInfo tasks = 1;
}
message TaskInfo {
    string name = 1;
    bool locked = 2;
    string hostname = 3;
}
