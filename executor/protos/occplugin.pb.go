// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/OccPlugin.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StateChangeTrigger int32

const (
	StateChangeTrigger_EXECUTOR           StateChangeTrigger = 0
	StateChangeTrigger_DEVICE_INTENTIONAL StateChangeTrigger = 1
	StateChangeTrigger_DEVICE_ERROR       StateChangeTrigger = 2
)

var StateChangeTrigger_name = map[int32]string{
	0: "EXECUTOR",
	1: "DEVICE_INTENTIONAL",
	2: "DEVICE_ERROR",
}
var StateChangeTrigger_value = map[string]int32{
	"EXECUTOR":           0,
	"DEVICE_INTENTIONAL": 1,
	"DEVICE_ERROR":       2,
}

func (x StateChangeTrigger) String() string {
	return proto.EnumName(StateChangeTrigger_name, int32(x))
}
func (StateChangeTrigger) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{0}
}

type StateType int32

const (
	StateType_STATE_STABLE       StateType = 0
	StateType_STATE_INTERMEDIATE StateType = 1
)

var StateType_name = map[int32]string{
	0: "STATE_STABLE",
	1: "STATE_INTERMEDIATE",
}
var StateType_value = map[string]int32{
	"STATE_STABLE":       0,
	"STATE_INTERMEDIATE": 1,
}

func (x StateType) String() string {
	return proto.EnumName(StateType_name, int32(x))
}
func (StateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{1}
}

type StateStreamRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateStreamRequest) Reset()         { *m = StateStreamRequest{} }
func (m *StateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*StateStreamRequest) ProtoMessage()    {}
func (*StateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{0}
}
func (m *StateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateStreamRequest.Merge(dst, src)
}
func (m *StateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateStreamRequest proto.InternalMessageInfo

type StateStreamReply struct {
	Type                 StateType `protobuf:"varint,1,opt,name=type,proto3,enum=occplugin_pb.StateType" json:"type,omitempty"`
	State                string    `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StateStreamReply) Reset()         { *m = StateStreamReply{} }
func (m *StateStreamReply) String() string { return proto.CompactTextString(m) }
func (*StateStreamReply) ProtoMessage()    {}
func (*StateStreamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{1}
}
func (m *StateStreamReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateStreamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateStreamReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StateStreamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateStreamReply.Merge(dst, src)
}
func (m *StateStreamReply) XXX_Size() int {
	return m.Size()
}
func (m *StateStreamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StateStreamReply.DiscardUnknown(m)
}

var xxx_messageInfo_StateStreamReply proto.InternalMessageInfo

func (m *StateStreamReply) GetType() StateType {
	if m != nil {
		return m.Type
	}
	return StateType_STATE_STABLE
}

func (m *StateStreamReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type GetStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateRequest) Reset()         { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()    {}
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{2}
}
func (m *GetStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateRequest.Merge(dst, src)
}
func (m *GetStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateRequest proto.InternalMessageInfo

type GetStateReply struct {
	State                string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateReply) Reset()         { *m = GetStateReply{} }
func (m *GetStateReply) String() string { return proto.CompactTextString(m) }
func (*GetStateReply) ProtoMessage()    {}
func (*GetStateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{3}
}
func (m *GetStateReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStateReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateReply.Merge(dst, src)
}
func (m *GetStateReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateReply proto.InternalMessageInfo

func (m *GetStateReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type ConfigEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigEntry) Reset()         { *m = ConfigEntry{} }
func (m *ConfigEntry) String() string { return proto.CompactTextString(m) }
func (*ConfigEntry) ProtoMessage()    {}
func (*ConfigEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{4}
}
func (m *ConfigEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConfigEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigEntry.Merge(dst, src)
}
func (m *ConfigEntry) XXX_Size() int {
	return m.Size()
}
func (m *ConfigEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigEntry proto.InternalMessageInfo

func (m *ConfigEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TransitionRequest struct {
	SrcState             string         `protobuf:"bytes,1,opt,name=srcState,proto3" json:"srcState,omitempty"`
	Event                string         `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	Arguments            []*ConfigEntry `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TransitionRequest) Reset()         { *m = TransitionRequest{} }
func (m *TransitionRequest) String() string { return proto.CompactTextString(m) }
func (*TransitionRequest) ProtoMessage()    {}
func (*TransitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{5}
}
func (m *TransitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionRequest.Merge(dst, src)
}
func (m *TransitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionRequest proto.InternalMessageInfo

func (m *TransitionRequest) GetSrcState() string {
	if m != nil {
		return m.SrcState
	}
	return ""
}

func (m *TransitionRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *TransitionRequest) GetArguments() []*ConfigEntry {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type TransitionReply struct {
	Trigger              StateChangeTrigger `protobuf:"varint,1,opt,name=trigger,proto3,enum=occplugin_pb.StateChangeTrigger" json:"trigger,omitempty"`
	State                string             `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Event                string             `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Ok                   bool               `protobuf:"varint,4,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TransitionReply) Reset()         { *m = TransitionReply{} }
func (m *TransitionReply) String() string { return proto.CompactTextString(m) }
func (*TransitionReply) ProtoMessage()    {}
func (*TransitionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_OccPlugin_6f030ab6e6d69637, []int{6}
}
func (m *TransitionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransitionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionReply.Merge(dst, src)
}
func (m *TransitionReply) XXX_Size() int {
	return m.Size()
}
func (m *TransitionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionReply.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionReply proto.InternalMessageInfo

func (m *TransitionReply) GetTrigger() StateChangeTrigger {
	if m != nil {
		return m.Trigger
	}
	return StateChangeTrigger_EXECUTOR
}

func (m *TransitionReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *TransitionReply) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *TransitionReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*StateStreamRequest)(nil), "occplugin_pb.StateStreamRequest")
	proto.RegisterType((*StateStreamReply)(nil), "occplugin_pb.StateStreamReply")
	proto.RegisterType((*GetStateRequest)(nil), "occplugin_pb.GetStateRequest")
	proto.RegisterType((*GetStateReply)(nil), "occplugin_pb.GetStateReply")
	proto.RegisterType((*ConfigEntry)(nil), "occplugin_pb.ConfigEntry")
	proto.RegisterType((*TransitionRequest)(nil), "occplugin_pb.TransitionRequest")
	proto.RegisterType((*TransitionReply)(nil), "occplugin_pb.TransitionReply")
	proto.RegisterEnum("occplugin_pb.StateChangeTrigger", StateChangeTrigger_name, StateChangeTrigger_value)
	proto.RegisterEnum("occplugin_pb.StateType", StateType_name, StateType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OccPlugin service

type OccPluginClient interface {
	// We have to have a notification stream because the FairMQDevice might transition
	// on its own for whatever reason.
	StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (OccPlugin_StateStreamClient, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error)
	Transition(ctx context.Context, in *TransitionRequest, opts ...grpc.CallOption) (*TransitionReply, error)
}

type occPluginClient struct {
	cc *grpc.ClientConn
}

func NewOccPluginClient(cc *grpc.ClientConn) OccPluginClient {
	return &occPluginClient{cc}
}

func (c *occPluginClient) StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (OccPlugin_StateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OccPlugin_serviceDesc.Streams[0], "/occplugin_pb.OccPlugin/StateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &occPluginStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OccPlugin_StateStreamClient interface {
	Recv() (*StateStreamReply, error)
	grpc.ClientStream
}

type occPluginStateStreamClient struct {
	grpc.ClientStream
}

func (x *occPluginStateStreamClient) Recv() (*StateStreamReply, error) {
	m := new(StateStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *occPluginClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error) {
	out := new(GetStateReply)
	err := c.cc.Invoke(ctx, "/occplugin_pb.OccPlugin/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occPluginClient) Transition(ctx context.Context, in *TransitionRequest, opts ...grpc.CallOption) (*TransitionReply, error) {
	out := new(TransitionReply)
	err := c.cc.Invoke(ctx, "/occplugin_pb.OccPlugin/Transition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OccPlugin service

type OccPluginServer interface {
	// We have to have a notification stream because the FairMQDevice might transition
	// on its own for whatever reason.
	StateStream(*StateStreamRequest, OccPlugin_StateStreamServer) error
	GetState(context.Context, *GetStateRequest) (*GetStateReply, error)
	Transition(context.Context, *TransitionRequest) (*TransitionReply, error)
}

func RegisterOccPluginServer(s *grpc.Server, srv OccPluginServer) {
	s.RegisterService(&_OccPlugin_serviceDesc, srv)
}

func _OccPlugin_StateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OccPluginServer).StateStream(m, &occPluginStateStreamServer{stream})
}

type OccPlugin_StateStreamServer interface {
	Send(*StateStreamReply) error
	grpc.ServerStream
}

type occPluginStateStreamServer struct {
	grpc.ServerStream
}

func (x *occPluginStateStreamServer) Send(m *StateStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _OccPlugin_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccPluginServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/occplugin_pb.OccPlugin/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccPluginServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccPlugin_Transition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccPluginServer).Transition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/occplugin_pb.OccPlugin/Transition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccPluginServer).Transition(ctx, req.(*TransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OccPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "occplugin_pb.OccPlugin",
	HandlerType: (*OccPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _OccPlugin_GetState_Handler,
		},
		{
			MethodName: "Transition",
			Handler:    _OccPlugin_Transition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateStream",
			Handler:       _OccPlugin_StateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/OccPlugin.proto",
}

func (m *StateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StateStreamReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateStreamReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(m.Type))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SrcState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.SrcState)))
		i += copy(dAtA[i:], m.SrcState)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Arguments) > 0 {
		for _, msg := range m.Arguments {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintOccPlugin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransitionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Trigger != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(m.Trigger))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOccPlugin(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if m.Ok {
		dAtA[i] = 0x20
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOccPlugin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StateStreamRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateStreamReply) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOccPlugin(uint64(m.Type))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransitionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SrcState)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovOccPlugin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransitionReply) Size() (n int) {
	var l int
	_ = l
	if m.Trigger != 0 {
		n += 1 + sovOccPlugin(uint64(m.Trigger))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovOccPlugin(uint64(l))
	}
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOccPlugin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOccPlugin(x uint64) (n int) {
	return sovOccPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateStreamReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateStreamReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateStreamReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (StateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &ConfigEntry{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransitionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransitionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			m.Trigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Trigger |= (StateChangeTrigger(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOccPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOccPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOccPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOccPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOccPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOccPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOccPlugin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOccPlugin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOccPlugin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOccPlugin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOccPlugin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protos/OccPlugin.proto", fileDescriptor_OccPlugin_6f030ab6e6d69637) }

var fileDescriptor_OccPlugin_6f030ab6e6d69637 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xed, 0x26, 0x05, 0x92, 0x49, 0x68, 0xdd, 0x55, 0xd5, 0x86, 0xa0, 0x1a, 0xcb, 0x12, 0x52,
	0x54, 0x84, 0x41, 0x41, 0x15, 0x12, 0xb7, 0x34, 0x5d, 0x41, 0xa4, 0x90, 0xa0, 0xf5, 0x16, 0x21,
	0x2e, 0x91, 0x63, 0x2d, 0xae, 0x15, 0xd7, 0x36, 0xf6, 0xa6, 0x92, 0x2f, 0xdc, 0xf9, 0x07, 0xfc,
	0x24, 0x8e, 0xfc, 0x04, 0x14, 0xfe, 0x05, 0x27, 0xe4, 0x8d, 0xe3, 0x0f, 0x48, 0xb9, 0x79, 0xde,
	0xbe, 0x79, 0x6f, 0x76, 0xf6, 0x19, 0x8e, 0xc2, 0x28, 0x10, 0x41, 0xfc, 0x6c, 0x6a, 0xdb, 0xef,
	0xbc, 0xa5, 0xe3, 0xfa, 0x86, 0x04, 0x70, 0x3b, 0xb0, 0xed, 0x50, 0x02, 0xb3, 0x70, 0xae, 0x1f,
	0x02, 0x36, 0x85, 0x25, 0xb8, 0x29, 0x22, 0x6e, 0x5d, 0x53, 0xfe, 0x79, 0xc9, 0x63, 0xa1, 0x5f,
	0x82, 0x52, 0x41, 0x43, 0x2f, 0xc1, 0x4f, 0x60, 0x57, 0x24, 0x21, 0xef, 0x20, 0x0d, 0xf5, 0xf6,
	0xfa, 0xc7, 0x46, 0x59, 0xc6, 0x90, 0x6c, 0x96, 0x84, 0x9c, 0x4a, 0x12, 0x3e, 0x84, 0x3b, 0x71,
	0x0a, 0x75, 0x6a, 0x1a, 0xea, 0x35, 0xe9, 0xba, 0xd0, 0x0f, 0x60, 0xff, 0x35, 0x17, 0x92, 0xbb,
	0x71, 0x7a, 0x0c, 0xf7, 0x0b, 0x28, 0xb5, 0xc9, 0x3b, 0x51, 0xb9, 0xf3, 0x0c, 0x5a, 0xc3, 0xc0,
	0xff, 0xe4, 0x3a, 0xc4, 0x17, 0x51, 0x82, 0x15, 0xa8, 0x2f, 0x78, 0x92, 0x51, 0xd2, 0xcf, 0xb4,
	0xed, 0xc6, 0xf2, 0x96, 0xb9, 0xa1, 0x2c, 0xf4, 0x2f, 0x70, 0xc0, 0x22, 0xcb, 0x8f, 0x5d, 0xe1,
	0x06, 0x7e, 0x66, 0x89, 0xbb, 0xd0, 0x88, 0x23, 0xdb, 0x2c, 0x99, 0xe4, 0x75, 0x2a, 0xc3, 0x6f,
	0xb8, 0x2f, 0x36, 0x32, 0xb2, 0xc0, 0x2f, 0xa1, 0x69, 0x45, 0xce, 0xf2, 0x9a, 0xfb, 0x22, 0xee,
	0xd4, 0xb5, 0x7a, 0xaf, 0xd5, 0x7f, 0x50, 0xbd, 0x7f, 0x69, 0x38, 0x5a, 0x70, 0xf5, 0xaf, 0x08,
	0xf6, 0xcb, 0x03, 0xa4, 0x17, 0x7c, 0x05, 0xf7, 0x44, 0xe4, 0x3a, 0x0e, 0x8f, 0xb2, 0x55, 0x6a,
	0x5b, 0x56, 0x39, 0xbc, 0xb2, 0x7c, 0x87, 0xb3, 0x35, 0x8f, 0x6e, 0x1a, 0xb6, 0xaf, 0xb5, 0x18,
	0xba, 0x5e, 0x1e, 0x7a, 0x0f, 0x6a, 0xc1, 0xa2, 0xb3, 0xab, 0xa1, 0x5e, 0x83, 0xd6, 0x82, 0xc5,
	0xe9, 0x38, 0x7b, 0xe9, 0x8a, 0x34, 0x6e, 0x43, 0x83, 0x7c, 0x20, 0xc3, 0x4b, 0x36, 0xa5, 0xca,
	0x0e, 0x3e, 0x02, 0x7c, 0x41, 0xde, 0x8f, 0x86, 0x64, 0x36, 0x9a, 0x30, 0x32, 0x61, 0xa3, 0xe9,
	0x64, 0x30, 0x56, 0x10, 0x56, 0xa0, 0x9d, 0xe1, 0x84, 0xd2, 0x29, 0x55, 0x6a, 0xa7, 0x67, 0xd0,
	0xcc, 0xdf, 0x3c, 0x3d, 0x36, 0xd9, 0x80, 0x91, 0x99, 0xc9, 0x06, 0xe7, 0x63, 0xb2, 0x16, 0x5a,
	0x23, 0xa9, 0x0e, 0x7d, 0x4b, 0x2e, 0x46, 0x03, 0x46, 0x14, 0xd4, 0xff, 0x8d, 0xa0, 0x99, 0x07,
	0x12, 0x9b, 0xd0, 0x2a, 0xc5, 0x0c, 0x6f, 0x5b, 0x44, 0x25, 0x97, 0x5d, 0xf5, 0x3f, 0x8c, 0xd0,
	0x4b, 0xf4, 0x9d, 0xe7, 0x08, 0xbf, 0x81, 0xc6, 0x26, 0x51, 0xf8, 0xa4, 0xca, 0xff, 0x2b, 0x7c,
	0xdd, 0x87, 0xb7, 0x1d, 0x4b, 0x2d, 0x3c, 0x01, 0x28, 0x1e, 0x0f, 0x3f, 0xaa, 0x92, 0xff, 0xc9,
	0x55, 0xf7, 0xe4, 0x76, 0x82, 0xd4, 0x3b, 0x7f, 0xfa, 0x7d, 0xa5, 0xa2, 0x1f, 0x2b, 0x15, 0xfd,
	0x5c, 0xa9, 0xe8, 0xdb, 0x2f, 0x75, 0x07, 0x8e, 0xed, 0x2b, 0xc3, 0xe6, 0x91, 0x6f, 0x58, 0x9e,
	0x6b, 0xf3, 0xa2, 0xff, 0x63, 0x2d, 0x9c, 0xcf, 0xef, 0xca, 0xff, 0xf5, 0xc5, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x40, 0x2a, 0x98, 0x33, 0xc9, 0x03, 0x00, 0x00,
}
