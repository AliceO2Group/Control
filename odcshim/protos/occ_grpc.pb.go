// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OccClient is the client API for Occ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OccClient interface {
	// We have to have a notification stream because the FairMQDevice might transition
	// on its own for whatever reason.
	EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (Occ_EventStreamClient, error)
	StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (Occ_StateStreamClient, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error)
	Transition(ctx context.Context, in *TransitionRequest, opts ...grpc.CallOption) (*TransitionReply, error)
}

type occClient struct {
	cc grpc.ClientConnInterface
}

func NewOccClient(cc grpc.ClientConnInterface) OccClient {
	return &occClient{cc}
}

func (c *occClient) EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (Occ_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Occ_serviceDesc.Streams[0], "/occ_pb.Occ/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &occEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Occ_EventStreamClient interface {
	Recv() (*EventStreamReply, error)
	grpc.ClientStream
}

type occEventStreamClient struct {
	grpc.ClientStream
}

func (x *occEventStreamClient) Recv() (*EventStreamReply, error) {
	m := new(EventStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *occClient) StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (Occ_StateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Occ_serviceDesc.Streams[1], "/occ_pb.Occ/StateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &occStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Occ_StateStreamClient interface {
	Recv() (*StateStreamReply, error)
	grpc.ClientStream
}

type occStateStreamClient struct {
	grpc.ClientStream
}

func (x *occStateStreamClient) Recv() (*StateStreamReply, error) {
	m := new(StateStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *occClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error) {
	out := new(GetStateReply)
	err := c.cc.Invoke(ctx, "/occ_pb.Occ/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occClient) Transition(ctx context.Context, in *TransitionRequest, opts ...grpc.CallOption) (*TransitionReply, error) {
	out := new(TransitionReply)
	err := c.cc.Invoke(ctx, "/occ_pb.Occ/Transition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OccServer is the server API for Occ service.
// All implementations should embed UnimplementedOccServer
// for forward compatibility
type OccServer interface {
	// We have to have a notification stream because the FairMQDevice might transition
	// on its own for whatever reason.
	EventStream(*EventStreamRequest, Occ_EventStreamServer) error
	StateStream(*StateStreamRequest, Occ_StateStreamServer) error
	GetState(context.Context, *GetStateRequest) (*GetStateReply, error)
	Transition(context.Context, *TransitionRequest) (*TransitionReply, error)
}

// UnimplementedOccServer should be embedded to have forward compatible implementations.
type UnimplementedOccServer struct {
}

func (UnimplementedOccServer) EventStream(*EventStreamRequest, Occ_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedOccServer) StateStream(*StateStreamRequest, Occ_StateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StateStream not implemented")
}
func (UnimplementedOccServer) GetState(context.Context, *GetStateRequest) (*GetStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedOccServer) Transition(context.Context, *TransitionRequest) (*TransitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transition not implemented")
}

// UnsafeOccServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OccServer will
// result in compilation errors.
type UnsafeOccServer interface {
	mustEmbedUnimplementedOccServer()
}

func RegisterOccServer(s grpc.ServiceRegistrar, srv OccServer) {
	s.RegisterService(&_Occ_serviceDesc, srv)
}

func _Occ_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OccServer).EventStream(m, &occEventStreamServer{stream})
}

type Occ_EventStreamServer interface {
	Send(*EventStreamReply) error
	grpc.ServerStream
}

type occEventStreamServer struct {
	grpc.ServerStream
}

func (x *occEventStreamServer) Send(m *EventStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Occ_StateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OccServer).StateStream(m, &occStateStreamServer{stream})
}

type Occ_StateStreamServer interface {
	Send(*StateStreamReply) error
	grpc.ServerStream
}

type occStateStreamServer struct {
	grpc.ServerStream
}

func (x *occStateStreamServer) Send(m *StateStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Occ_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/occ_pb.Occ/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Occ_Transition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccServer).Transition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/occ_pb.Occ/Transition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccServer).Transition(ctx, req.(*TransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Occ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "occ_pb.Occ",
	HandlerType: (*OccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Occ_GetState_Handler,
		},
		{
			MethodName: "Transition",
			Handler:    _Occ_Transition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Occ_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StateStream",
			Handler:       _Occ_StateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/occ.proto",
}
